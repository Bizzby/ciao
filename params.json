{"name":"Ciao","tagline":"Ciao is a simple command line utility for testing http(s) requests and generating API documentation","body":"# Ciao\r\n\r\nCiao is a simple command line utility for testing http(s) requests and generating API documentation.\r\n\r\nScripts are written in coffee-script, however it's important to note that they are interpreted, not executed.\r\n\r\n### Basic uptime script:\r\n\r\n```coffee-script\r\n#> Check Google is still running\r\nhost: 'www.google.co.uk'\r\n\r\n#? Should have company name\r\nresponse.body.should.include 'Google'\r\n```\r\n\r\n### HTML test script:\r\n\r\n```coffee-script\r\n#> Twitter home page\r\nport: 443\r\nprotocol: 'https:'\r\nhost: 'twitter.com'\r\n\r\n#? Login form\r\n$('div.front-signin input#signin-email').length.should.eql 1\r\n$('div.front-signin input#signin-password').length.should.eql 1\r\n$('div.front-signin button[type=\"submit\"]').length.should.eql 1\r\n```\r\n\r\n### JSON webservice script:\r\n\r\n```coffee-script\r\n#! Requried Headers\r\nheaders: 'User-Agent': 'Ciao/Client 1.0'\r\n\r\n#> Github API call for node.js README\r\nport: 443\r\nprotocol: 'https:'\r\nhost: 'api.github.com'\r\npath: '/repos/joyent/node/readme'\r\nheaders: 'Accept': 'application/json'\r\n\r\n#? Readme is available on Github\r\nresponse.statusCode.should.equal 200\r\nresponse.should.have.header 'server', 'GitHub.com'\r\n\r\n#? Should be what we are looking for...\r\njson.sha.should.match /^[a-z0-9]{40}/\r\njson.should.include\r\n  type: 'file'\r\n  path: 'README.md'\r\n  url: 'https://api.github.com/repos/joyent/node/contents/README.md'\r\n  html_url: 'https://github.com/joyent/node/blob/master/README.md'\r\n  git_url: 'https://api.github.com/repos/joyent/node/git/blobs/' + json.sha\r\n```\r\n\r\nWhen you run a script, documentation is produced. eg:\r\n[Github API Example - Documentation](https://github.com/missinglink/ciao/blob/master/doc/scripts/examples/github-api.md)\r\n\r\n---\r\n\r\n# Interpreter directives\r\n\r\nCiao uses a special syntax to declare the start and end of code blocks.\r\n\r\nCurrently 4 interpreter directives are supported:\r\n\r\n* `#! before` block, this is merged in to every `request` block.\r\n* `#> request` block, this is the main http(s) query definition block.\r\n* `#? assertion` block, this defines a test case which the `result` should conform to.\r\n* `## junk` block, all code in this block will be ignored by the parser.\r\n\r\nEach directive is followed by a single space and a directive title\r\n\r\neg. `#> Contact page is available` defines a `#> request` block with the title `Contact page is available`.\r\n\r\nThe title is used for reporting & documentation, so the better your titles, the easier life will be for you.\r\n\r\n---\r\n\r\n# Installing Ciao\r\n\r\nTo install the most stable `ciao` binary globally on your system via `npm` you can simply:\r\n\r\n```bash\r\n$ [sudo] npm install -g ciao\r\n$ ciao --help\r\n```\r\n\r\n* Note: documentation (such as this README) may cover features not yet available via `npm`.\r\n* Note: you will need `node` and `npm` installed first: http://nodejs.org/download/\r\n\r\n---\r\n\r\n# Running Scripts\r\n\r\n```\r\npeter@edgy:/var/www/ciao$ ciao --help\r\n\r\n  Usage: ciao [options] <file ...>\r\n\r\n  Options:\r\n    -h, --help                 output usage information\r\n    -V, --version              output the version number\r\n    -g, --gist [url]           load script from github gist\r\n    -c, --conf [dir]           an additional config file to load after ciao.json\r\n    -s, --silent               disable reporters\r\n    -v, --verbose              report full requests and responses on error\r\n    -d, --documentation [dir]  generate documentation in output dir\r\n```\r\n\r\n### Running a single script\r\n\r\n```bash\r\n$ ciao scripts/examples/basic.coffee \r\n\r\n GET http://www.google.co.uk/ scripts/examples/basic.coffee \r\n ✓ Status: 200 OK\r\n\r\n GET http://www.google.co.uk/ scripts/examples/basic.coffee \r\n ✓ Response.body should contain company name\r\n```\r\n\r\n### Running all scripts in a directory\r\n\r\nYou can also use ciao on directories to recursively run all scripts.\r\n\r\n```bash\r\n$ ciao scripts/\r\n```\r\n\r\n### Running a gist as a script\r\n\r\nYou can run remote scripts from github by providing the gist suffix or url.\r\n\r\n```bash\r\n$ ciao --gist missinglink/4678610\r\n$ ciao --gist https://gist.github.com/missinglink/4678610\r\n```\r\n\r\nNote: The way the gist flag behaves has changed since `0.1.8`, please upgrade if you have issues.\r\n\r\n---\r\n\r\n# Requests\r\n\r\nThe ciao request format is the same as that of the `node.js` native http client `http.request`.\r\n\r\nAll `#> request` blocks have access to an object named `config` which contains all the static configuration properties defined in the ciao config. (as discussed below)\r\n\r\n### Request properties\r\n\r\n* `host` A domain name or IP address of the server to issue the request to. Defaults to 'www.example.com'.\r\n* `hostname` To support url.parse() hostname is preferred over host\r\n* `port` Port of remote server. Defaults to 80.\r\n* `method` A string specifying the HTTP request method. Defaults to 'GET'.\r\n* `path` Request path. Defaults to '/'. Should include query string if any. E.G. '/index.html?page=12'\r\n* `headers` An object containing request headers.\r\n* `auth` Basic authentication i.e. 'user:password' to compute an Authorization header.\r\n* `body` If body is an object then `JSON.stringify` will be run on it before sending.\r\n\r\nFull `http.request` reference: http://nodejs.org/api/http.html#http_http_request_options_callback\r\n\r\n### Examples\r\n\r\n```coffee-script\r\n#> Post data to a JSON web service\r\npath: '/blog/article'\r\nmethod: 'POST'\r\nheaders:\r\n  'Accept': 'application/json'\r\n  'Content-Type': 'application/json'\r\nbody: \r\n  title: 'My amazing blog post'\r\n  body: '@todo'\r\n```\r\n\r\n```coffee-script\r\n#> Get package details from the npm registry\r\nhost: 'registry.npmjs.org'\r\npath: '/ciao/latest'\r\nheaders: 'Accept': 'application/json'\r\n\r\n#? Should have preferGlobal set to true\r\njson.preferGlobal.should.be.true\r\n```\r\n\r\n---\r\n\r\n# Assertions\r\n\r\nYou can add assertions to your scripts by including `#? assertion` blocks.\r\n\r\nCurrently `#? assertion` blocks only provide the functionality of the `should` js framework, but I am looking at adding more assertion libraries in the future.\r\n\r\nEach test case has access to four objects named `title`, `response`, `json` & `$`.\r\n\r\n* `title` is simply the title specified in the interpreter directive (as discussed above)\r\n* `response` contains 3 properties returned by `http.request`\r\n  * `body` contains the body of the http(s) response.\r\n  * `statusCode` contains the status code of the http(s) response.\r\n  * `headers` contains an array of headers that were returned.\r\n* `json` the result of parsing the response.body with `JSON.parse` (empty for invalid json).\r\n* `$` the result of parsing the response.body with `cheerio` (a familiar jQuery-like API).\r\n\r\n### Examples\r\n\r\n```coffee-script\r\n#? Test the response code\r\nresponse.statusCode.should.equal 200\r\n\r\n#? Test a header is set\r\nresponse.should.have.header 'server'\r\n\r\n#? Test a header value\r\nresponse.should.have.header 'server', 'apache'\r\n\r\n#? Test body contains string\r\nresponse.body.should.include 'Bingo Bango Bongo!'\r\n\r\n#? Test body contains regex\r\nresponse.body.should.match /^[a-z0-9]{40}/\r\n\r\n#? Test json object contains properties\r\njson.should.include {\r\n  id: \"10000000000000000000\",\r\n  name: \"Bingo Bango Bongo!\"\r\n}\r\n\r\n#? Check for a redirect\r\nresponse.should.have.header 'location', 'http://www.example.com/'\r\n```\r\n\r\n`should.js` reference: https://github.com/visionmedia/should.js/\r\n\r\n### Testing the DOM\r\n\r\nSince version `0.1.8` you can test DOM elements in your source using a jQuery-like syntax.\r\n\r\n```coffee-script\r\n#> Wikipedia home page\r\nhost: 'en.wikipedia.org'\r\npath: '/wiki/Main_Page'\r\n\r\n#? Count stylesheets\r\n$('link[rel=\"stylesheet\"]').length.should.eql 2\r\n\r\n#? Page structure\r\n$('body.mediawiki > div#mw-page-base').length.should.eql 1\r\n\r\n#? Check headers are correctly rendered\r\n$('span.mw-headline').first().text().should.eql \"From today's featured article\"\r\n$('span.mw-headline').eq(1).text().should.eql \"Did you know...\"\r\n$('span.mw-headline').eq(2).text().should.eql \"Today's articles for improvement\"\r\n$('span.mw-headline').eq(3).text().should.eql \"In the news\"\r\n$('span.mw-headline').eq(4).text().should.eql \"On this day...\"\r\n$('span.mw-headline').last().text().should.eql \"Wikipedia languages\"\r\n```\r\n\r\n`cheerio` reference: https://github.com/MatthewMueller/cheerio\r\n\r\n---\r\n\r\n# Project Settings\r\n\r\nCiao looks for a project-wide configuration file called `ciao.json` in your current working directory.\r\n\r\nThe `defaults` section is merged in to every request that is made, it's useful for specifying global request properties such as `host` and `port`.\r\n\r\nThe `config` section is useful for storing session tokens or any sort of data you would like available to `#! before` or `#> request` blocks.\r\n\r\nExample `ciao.json`\r\n\r\n```javascript\r\n{\r\n  \"defaults\": {\r\n    \"host\": \"www.google.co.uk\",\r\n    \"port\": 80,\r\n    \"headers\": {\r\n      \"User-Agent\": \"Ciao/Client 1.0\"\r\n    }\r\n  },\r\n  \"config\": {\r\n    \"bingo\": \"bango\"\r\n  }\r\n}\r\n```\r\n\r\n## Dynamic Project Settings\r\n\r\nIf you require your settings to be generated before the test suite runs then you may use a file called `ciao.js` or `ciao.coffee` instead of `ciao.json`.\r\n\r\nThis is particularly useful for running `fixtures` or any other `local` or `remote` code before your tests start.\r\n\r\nDynamic configurations must export their settings with `module.exports` or an error will be thrown.\r\n\r\nNote: This feature was introduced in `0.3.1`, please upgrade if you have issues.\r\n\r\n---\r\n\r\n# Generate Documentation\r\n\r\nCiao can generate documentation for each `#> request`, the resulting `response` and all `#? assertion` blocks.\r\n\r\nThe documentation is in `markdown` format and is available in the directory specified using the `-d` flag.\r\n\r\neg. To generate documentation in `./doc` for all scripts in `./scripts`:\r\n```bash\r\n$ ciao -d doc scripts\r\n```\r\n\r\nAn example generated documentation file can be found here:\r\n[Github API Example - Documentation](https://github.com/missinglink/ciao/blob/master/doc/scripts/examples/github-api.md)\r\n\r\n---\r\n\r\n## How it works\r\n\r\nWhen parsing `script` & `config` files ciao launches child processes to excute the coffee-script source.\r\nThis isolates the main thread from malicious code and ensures the fastest execution of tests.\r\n\r\nAll the requests are launched asyncronously using `http.request`.\r\n\r\nAfter a `response` comes back from the target server; all `#? assertion` blocks are fired asyncronously in a seperate child process.\r\n\r\n## NPM Module\r\n\r\nThe `ciao` npm module can be found here:\r\n[https://npmjs.org/package/ciao](https://npmjs.org/package/ciao)\r\n\r\n## Github Pages\r\n\r\nA prettier version of this readme is available here:\r\n[http://missinglink.github.com/ciao/](http://missinglink.github.com/ciao/)\r\n\r\n## Contributing\r\n\r\nPlease fork and pull request against upstream master on a feature branch.\r\n\r\nPretty please; provide unit tests and script fixtures in the `test` and `fixtures` directories.\r\n\r\n### Getting Set Up\r\n\r\n```bash\r\n$ git clone git@github.com:missinglink/ciao.git ciao\r\n$ cd ciao\r\n$ npm install\r\n$ npm test\r\n$ ./bin/ciao scripts/examples\r\n```\r\n\r\n### Running Unit Tests\r\n\r\nThe unit test suite is run using `mocha`\r\n\r\n```bash\r\n$ npm test\r\n```\r\n\r\n### Continuous Integration\r\n\r\nTravis tests every release against node versions `0.6` `0.8` & `0.10`\r\n\r\n[![Build Status](https://travis-ci.org/missinglink/ciao.png?branch=master)](https://travis-ci.org/missinglink/ciao)\r\n\r\n### Running Ciao test scripts\r\n\r\nThis will execute all tests in the `./scripts` directory and write documentation in the `./doc` directory.\r\n\r\n```bash\r\n$ npm run ciao\r\n```\r\n\r\n### Known bugs\r\n\r\nIt's early stages yet; there are a bunch of issues reported here:\r\nhttps://github.com/missinglink/ciao/issues\r\n\r\nPlease report everything as it comes up, no matter how small.\r\n\r\n### Code review\r\n\r\nIf you would like a code review or to open a feature discussion, please fork and pull request against upstream master.\r\n\r\n## Project goals\r\n\r\n### Short term\r\n\r\n* Stability\r\n* Cool Functionality\r\n* Ease of use\r\n\r\n### Mid term\r\n\r\n* Improved reporters\r\n* Improved documentors\r\n* Web interface\r\n\r\n### Long term\r\n\r\n* Scheduled builds\r\n* Hosted CI solution","google":"UA-40580978-1","note":"Don't delete this file! It's used internally to help with page regeneration."}